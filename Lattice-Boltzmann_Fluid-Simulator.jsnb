{
  "metadata": {
    "name": "Lattice-Boltzmann_Fluid-Simulator",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Lattice Boltzman Fluid Simulator</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            margin: 0;\n            font-family: 'Roboto', sans-serif;\n            background-color: #121212;\n            color: #e0e0e0;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n        }\n        .header {\n            margin-bottom: 20px;\n        }\n        h1 {\n            font-size: 2rem;\n            font-weight: 700;\n        }\n        .controls {\n            display: flex;\n            justify-content: center;\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        .controls label {\n            font-weight: 500;\n        }\n        .controls select, .controls input {\n            background-color: #1e1e1e;\n            color: #e0e0e0;\n            border: 1px solid #333;\n            padding: 5px 10px;\n            border-radius: 5px;\n        }\n        button {\n            background-color: #333;\n            color: #e0e0e0;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #444;\n        }\n        #projectCanvas {\n            width: 100%;\n            max-width: 100%;\n            height: 100%;\n            background-color: #000;\n            display: block;\n            margin: 0 auto;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Lattice Boltzman Fluid Simulator</h1>\n        </div>\n        <div class=\"controls\">\n            <label for=\"plotOptions\">Plot: \n                <select id=\"plotOptions\">\n                    <option value=\"curl\">Curl</option>\n                    <option value=\"rho\">Density</option>\n                    <option value=\"speed\">Speed</option>\n                    <option value=\"vx\">X Velocity</option>\n                    <option value=\"vy\">Y Velocity</option>\n                </select>\n            </label>\n            <label for=\"viscositySlider\">Viscosity: \n                <input type=\"range\" id=\"viscositySlider\" min=\"0.005\" max=\"0.1\" step=\"0.005\" value=\"0.04\">\n            </label>\n            <!-- Button next to the slider -->\n            <button id=\"but1\">Start/Pause</button>\n        </div>\n        <canvas id=\"projectCanvas\"></canvas>\n    </div>\n\n    <script src=\"main.js\"></script>\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Lattice Boltzman Fluid Simulator</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            margin: 0;\n            font-family: 'Roboto', sans-serif;\n            background-color: #121212;\n            color: #e0e0e0;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100vh;\n        }\n        .header {\n            margin-bottom: 20px;\n        }\n        h1 {\n            font-size: 2rem;\n            font-weight: 700;\n        }\n        .controls {\n            display: flex;\n            justify-content: center;\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        .controls label {\n            font-weight: 500;\n        }\n        .controls select, .controls input {\n            background-color: #1e1e1e;\n            color: #e0e0e0;\n            border: 1px solid #333;\n            padding: 5px 10px;\n            border-radius: 5px;\n        }\n        button {\n            background-color: #333;\n            color: #e0e0e0;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #444;\n        }\n        #projectCanvas {\n            width: 100%;\n            max-width: 100%;\n            height: 100%;\n            background-color: #000;\n            display: block;\n            margin: 0 auto;\n        }\n    </style><style class=\"darkreader darkreader--sync\" media=\"screen\"></style>\n\n\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Lattice Boltzman Fluid Simulator</h1>\n        </div>\n        <div class=\"controls\">\n            <label for=\"plotOptions\">Plot: \n                <select id=\"plotOptions\">\n                    <option value=\"curl\">Curl</option>\n                    <option value=\"rho\">Density</option>\n                    <option value=\"speed\">Speed</option>\n                    <option value=\"vx\">X Velocity</option>\n                    <option value=\"vy\">Y Velocity</option>\n                </select>\n            </label>\n            <label for=\"viscositySlider\">Viscosity: \n                <input type=\"range\" id=\"viscositySlider\" min=\"0.005\" max=\"0.1\" step=\"0.005\" value=\"0.04\">\n            </label>\n            <!-- Button next to the slider -->\n            <button id=\"but1\">Start/Pause</button>\n        </div>\n        <canvas id=\"projectCanvas\" width=\"1920\" height=\"742\"></canvas>\n    </div>\n\n    <script src=\"main.js\"></script>\n\n\n",
      "type": "html"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "\"use strict\";\nconst canvas = document.getElementById(\"projectCanvas\");\ncanvas.width = window.innerWidth * devicePixelRatio;\ncanvas.height = window.innerHeight * devicePixelRatio;\nconst ctx = canvas.getContext(\"2d\");\nconst height = 100;\nconst width = 200;\nconst multiplier = 1.5;\nlet viscosity = 0.005 * multiplier;\nlet omega = 1 / (3 * viscosity + 0.5);\nconst u0 = 0.2 / multiplier;\nconst four9ths = 4. / 9.;\nconst one9th = 1. / 9.;\nconst one36th = 1. / 36.;\nconst CALC_DRAW_RATIO = 15;\nconst DRAW_SCALE_X = 0.9 * canvas.width / width;\nlet n0 = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nN = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nS = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nE = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nW = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nNW = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nNE = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nSE = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet nSW = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet bar = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet rho = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet ux = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet uy = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet speed2 = new Float32Array(new ArrayBuffer(height * width * Float32Array.BYTES_PER_ELEMENT));\nlet plotOption = \"curl\";\nconst plotSelect = document.getElementById(\"plotOptions\");\n// Add an event listener to detect changes in the dropdown\nplotSelect.addEventListener(\"change\", () => {\n    // Update the PlotOption variable to the selected value\n    plotOption = plotSelect.value;\n});\nlet paused = false;\nlet animVal = null;\nconst but1 = document.getElementById(\"but1\");\nbut1.addEventListener(\"click\", () => {\n    paused = !paused; // Toggle the paused state\n    if (!paused) {\n        // Resume the animation\n        tick();\n    }\n    else {\n        // Pause the animation by canceling the next frame\n        if (animVal !== null) {\n            cancelAnimationFrame(animVal);\n        }\n    }\n});\nconst viscositySlider = document.getElementById(\"viscositySlider\");\n// Add an event listener to detect changes in the slider\nviscositySlider.addEventListener(\"input\", () => {\n    // Update the viscosity variable to the slider's current value\n    viscosity = parseFloat(viscositySlider.value) * multiplier;\n    omega = 1 / (3 * viscosity + 0.5);\n    // console.log(`Viscosity updated to: ${viscosity}`);\n});\nconst flatten2D = (i, j) => {\n    return j * width + i;\n};\nconst stream = () => {\n    // for x in range(0, width-1):\n    for (let x = 0; x < width - 1; x++) {\n        // for y in range(1, height-1):\n        for (let y = 1; y < height - 1; y++) {\n            nN[y * width + x] = nN[y * width + x + width];\n            nNW[y * width + x] = nNW[y * width + x + width + 1];\n            nW[y * width + x] = nW[y * width + x + 1];\n            nS[(height - y - 1) * width + x] = nS[(height - y - 1 - 1) * width + x];\n            nSW[(height - y - 1) * width + x] = nSW[(height - y - 1 - 1) * width + x + 1];\n            nE[y * width + (width - x - 1)] = nE[y * width + (width - (x + 1) - 1)];\n            nNE[y * width + (width - x - 1)] = nNE[y * width + width + (width - (x + 1) - 1)];\n            nSE[(height - y - 1) * width + (width - x - 1)] = nSE[(height - y - 1 - 1) * width +\n                (width - (x + 1) - 1)];\n        }\n    }\n    const x = width;\n    // for y in range(1, height-1):\n    for (let y = 1; y < height - 1; y++) {\n        nN[y * width + x] = nN[y * width + x + width];\n        nS[(height - y - 1) * width + x] = nS[(height - y - 1 - 1) * width + x];\n    }\n};\nconst bounce = () => {\n    // for x in range(2, width-2):\n    //     for y in range(2, height-2):\n    for (let x = 2; x < width - 2; x++) {\n        for (let y = 2; y < height - 2; y++) {\n            // if (bar[y*width + x]):\n            if (bar[y * width + x]) {\n                nN[(y - 1) * width + x] = nS[y * width + x];\n                nS[(y + 1) * width + x] = nN[y * width + x];\n                nE[y * width + x + 1] = nW[y * width + x];\n                nW[y * width + (x - 1)] = nE[y * width + x];\n                nNE[(y - 1) * width + (x + 1)] = nSW[y * width + x];\n                nNW[(y - 1) * width + (x - 1)] = nSE[y * width + x];\n                nSE[(y + 1) * width + (x + 1)] = nNW[y * width + x];\n                nSW[(y + 1) * width + (x - 1)] = nNE[y * width + x];\n                n0[y * width + x] = 0;\n                nN[y * width + x] = 0;\n                nS[y * width + x] = 0;\n                nE[y * width + x] = 0;\n                nW[y * width + x] = 0;\n                nNE[y * width + x] = 0;\n                nNW[y * width + x] = 0;\n                nSE[y * width + x] = 0;\n                nSW[y * width + x] = 0;\n            }\n        }\n    }\n};\n// def collide():\nconst collide = () => {\n    // for x in range(1, width-1):\n    //     for y in range(1, height-1):\n    for (let x = 1; x < width - 1; x++) {\n        for (let y = 1; y < height - 1; y++) {\n            let i = y * width + x;\n            // if (bar[i]):\n            //     continue\n            if (bar[i]) {\n                continue;\n            }\n            else {\n                rho[i] = n0[i] + nN[i] + nE[i] + nS[i] + nW[i] + nNE[i] + nSE[i] + nSW[i] + nNW[i];\n                // if (rho[i] > 0):\n                if (rho[i] > 0) {\n                    ux[i] = (nE[i] + nNE[i] + nSE[i] - nW[i] - nNW[i] - nSW[i]) * (1 - (rho[i] - 1) + ((rho[i] - 1) ** 2.));\n                    uy[i] = (nN[i] + nNE[i] + nNW[i] - nS[i] - nSE[i] - nSW[i]) * (1 - (rho[i] - 1) + ((rho[i] - 1) ** 2.));\n                }\n                // one9th_rho = one9th * rho[i]\n                // one36th_rho = one36th * rho[i]\n                // vx3 = 3 * ux[i]\n                // vy3 = 3 * uy[i]\n                // vx2 = ux[i] * ux[i]\n                // vy2 = uy[i] * uy[i]\n                // vxvy2 = 2 * ux[i] * uy[i]\n                // v2 = vx2 + vy2\n                // speed2[i] = v2\n                // v215 = 1.5 * v2\n                const one9th_rho = one9th * rho[i];\n                const one36th_rho = one36th * rho[i];\n                const vx3 = 3 * ux[i];\n                const vy3 = 3 * uy[i];\n                const vx2 = ux[i] * ux[i];\n                const vy2 = uy[i] * uy[i];\n                const vxvy2 = 2 * ux[i] * uy[i];\n                const v2 = vx2 + vy2;\n                speed2[i] = v2;\n                const v215 = 1.5 * v2;\n                nE[i] += omega * (one9th_rho * (1 + vx3 + 4.5 * vx2 - v215) - nE[i]);\n                nW[i] += omega * (one9th_rho * (1 - vx3 + 4.5 * vx2 - v215) - nW[i]);\n                nN[i] += omega * (one9th_rho * (1 + vy3 + 4.5 * vy2 - v215) - nN[i]);\n                nS[i] += omega * (one9th_rho * (1 - vy3 + 4.5 * vy2 - v215) - nS[i]);\n                nNE[i] += omega * (one36th_rho * (1 + vx3 + vy3 + 4.5 * (v2 + vxvy2) - v215) - nNE[i]);\n                nNW[i] += omega * (one36th_rho * (1 - vx3 + vy3 + 4.5 * (v2 - vxvy2) - v215) - nNW[i]);\n                nSE[i] += omega * (one36th_rho * (1 + vx3 - vy3 + 4.5 * (v2 - vxvy2) - v215) - nSE[i]);\n                nSW[i] += omega * (one36th_rho * (1 - vx3 - vy3 + 4.5 * (v2 + vxvy2) - v215) - nSW[i]);\n                n0[i] = rho[i] - (nE[i] + nW[i] + nN[i] + nS[i] + nNE[i] + nSE[i] + nNW[i] + nSW[i]);\n            }\n        }\n    }\n};\n// def initialize(xtop, ytop, yheight, u0=u0):\n//     xcoord = 0\n//     ycoord = 0\n//     count = 0\n//     for i in range(height*width):\n//         n0[i] = four9ths* (1 - 1.5*(u0**2.))\n//         nN[i] = one9th  * (1 - 1.5*(u0**2.))\n//         nS[i] = one9th  * (1 - 1.5*(u0**2.))\n//         nE[i] = one9th  * (1 + 3*u0 + 4.5*(u0**2.) - 1.5*(u0**2.))\n//         nW[i] = one9th  * (1 - 3*u0 + 4.5*(u0**2.) - 1.5*(u0**2.))\n//         nNE[i]= one36th * (1 + 3*u0 + 4.5*(u0**2.) - 1.5*(u0**2.))\n//         nSE[i]= one36th * (1 + 3*u0 + 4.5*(u0**2.) - 1.5*(u0**2.))\n//         nNW[i]= one36th * (1 - 3*u0 + 4.5*(u0**2.) - 1.5*(u0**2.))\n//         nSW[i]= one36th * (1 - 3*u0 + 4.5*(u0**2.) - 1.5*(u0**2.))\n//         rho[i] =  n0[i] + nN[i] + nS[i] + nE[i] + nW[i] + nNE[i] + nSE[i] + nNW[i] + nSW[i]\n//         ux[i]  = (nE[i] + nNE[i] + nSE[i] - nW[i] - nNW[i] - nSW[i]) * (1-(rho[i]-1)+((rho[i]-1)**2.))\n//         uy[i]  = (nN[i] + nNE[i] + nNW[i] - nS[i] - nSE[i] - nSW[i]) * (1-(rho[i]-1)+((rho[i]-1)**2.))\n//         if (xcoord==xtop):\n//             if (ycoord >= ytop):\n//                 if (ycoord < (ytop+yheight)):\n//                     count += 1\n//                     bar[ycoord*width + xcoord] = 1\n//         xcoord = (xcoord+1) if xcoord<(width-1) else 0\n//         ycoord = ycoord if (xcoord != 0) else (ycoord + 1)\nconst initialize = (u0 = 0.1) => {\n    let xcoord = 0;\n    let ycoord = 0;\n    for (let i = 0; i < height * width; i++) {\n        n0[i] = four9ths * (1 - 1.5 * (u0 ** 2.));\n        nN[i] = one9th * (1 - 1.5 * (u0 ** 2.));\n        nS[i] = one9th * (1 - 1.5 * (u0 ** 2.));\n        nE[i] = one9th * (1 + 3 * u0 + 4.5 * (u0 ** 2.) - 1.5 * (u0 ** 2.));\n        nW[i] = one9th * (1 - 3 * u0 + 4.5 * (u0 ** 2.) - 1.5 * (u0 ** 2.));\n        nNE[i] = one36th * (1 + 3 * u0 + 4.5 * (u0 ** 2.) - 1.5 * (u0 ** 2.));\n        nSE[i] = one36th * (1 + 3 * u0 + 4.5 * (u0 ** 2.) - 1.5 * (u0 ** 2.));\n        nNW[i] = one36th * (1 - 3 * u0 + 4.5 * (u0 ** 2.) - 1.5 * (u0 ** 2.));\n        nSW[i] = one36th * (1 - 3 * u0 + 4.5 * (u0 ** 2.) - 1.5 * (u0 ** 2.));\n        rho[i] = n0[i] + nN[i] + nS[i] + nE[i] + nW[i] + nNE[i] + nSE[i] + nNW[i] + nSW[i];\n        ux[i] = (nE[i] + nNE[i] + nSE[i] - nW[i] - nNW[i] - nSW[i]) * (1 - (rho[i] - 1) + ((rho[i] - 1) ** 2.));\n        uy[i] = (nN[i] + nNE[i] + nNW[i] - nS[i] - nSE[i] - nSW[i]) * (1 - (rho[i] - 1) + ((rho[i] - 1) ** 2.));\n        xcoord = (xcoord + 1) < (width - 1) ? xcoord + 1 : 0;\n        ycoord = xcoord != 0 ? ycoord : ycoord + 1;\n    }\n};\nconst createWall = (x, y) => {\n    bar[flatten2D(x, y)] = 1;\n};\nconst handleBoundaries = () => {\n};\nconst offsetX = (canvas.width - width * DRAW_SCALE_X) / 2;\nconst offsetY = (canvas.height - height * DRAW_SCALE_X) / 2;\nconst draw = () => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // Calculate offsets to center the simulation on the canvas\n    for (let x = 2; x < width - 2; x++) {\n        for (let y = 2; y < height - 10; y++) {\n            const i = y * width + x;\n            if (bar[i]) {\n                ctx.fillStyle = \"black\";\n                ctx.fillRect(offsetX + x * DRAW_SCALE_X, offsetY + y * DRAW_SCALE_X, DRAW_SCALE_X, DRAW_SCALE_X);\n            }\n            else {\n                let c = 0;\n                switch (plotOption) {\n                    case \"rho\":\n                        c = 1 * Math.floor(200 * (rho[i] ** 6));\n                        ctx.fillStyle = `rgb(${c}, ${c}, ${c})`;\n                        break;\n                    case \"vx\":\n                        c = 10 * Math.floor(255 * ux[i]);\n                        ctx.fillStyle = `rgb(${0}, ${c}, ${c})`;\n                        break;\n                    case \"vy\":\n                        c = 10 * Math.floor(255 * uy[i]);\n                        ctx.fillStyle = `rgb(${c}, ${c}, ${0})`;\n                        break;\n                    case \"speed\":\n                        c = 5 * Math.floor(255 * Math.sqrt(speed2[i]));\n                        ctx.fillStyle = `rgb(${c}, ${c}, ${c})`;\n                        break;\n                    case \"curl\":\n                        c = 15 * Math.floor(255 * (uy[x + 1 + y * width] - uy[x - 1 + y * width] - ux[x + (y + 1) * width] + ux[x + (y - 1) * width]));\n                        ctx.fillStyle = `rgb(${Math.max(0, c)}, ${0}, ${Math.max(0, -c)})`;\n                        break;\n                }\n                // const c = 3000 * (uy[x + 1 + y * width] - uy[x - 1 + y * width] - ux[x + (y + 1) * width] + ux[x + (y - 1) * width]);\n                // ctx.fillStyle = `rgb(${Math.max(0, c)}, ${0}, ${Math.max(0, -c)})`;\n                ctx.fillRect(offsetX + x * DRAW_SCALE_X, offsetY + y * DRAW_SCALE_X, DRAW_SCALE_X, DRAW_SCALE_X);\n            }\n        }\n    }\n};\n// Adjust click position based on the canvas centering\naddEventListener(\"click\", (e) => {\n    const rect = canvas.getBoundingClientRect();\n    // Account for canvas' position on the screen, and the offset within the canvas\n    const posX = Math.floor((e.clientX - rect.left - offsetX) / DRAW_SCALE_X);\n    const posY = height + Math.floor((e.clientY - rect.top) / DRAW_SCALE_X);\n    console.log(e.clientX, e.clientY, rect.left, rect.top, offsetX, offsetY, posX, posY);\n    // Ensure the clicked position is within valid bounds\n    if (posX >= 2 && posX < width - 2 && posY >= 2 && posY < height - 10) {\n        // createWall(posX, posY);\n    }\n});\nlet time = performance.now();\nconst tick = () => {\n    if (paused) {\n        return;\n    }\n    for (let iter = 0; iter < CALC_DRAW_RATIO; iter++) {\n        stream();\n        bounce();\n        collide();\n    }\n    draw();\n    animVal = requestAnimationFrame(tick);\n    const newTime = performance.now();\n    // console.log(\"Simulation took\", newTime-time, \"ms\")\n    // console.log(\"n0[4000]: \", n0[4000])\n    time = newTime;\n};\ninitialize(u0);\n// const wallSize = Math.floor(height/5)\nconst wallSize = 10;\nfor (let j = Math.floor((height / 2) - wallSize / 2) - 1; j < (height / 2) + wallSize / 2; j++) {\n    createWall(20, j);\n}\nconsole.log(\"Initialization took\", performance.now() - time, \"ms\");\ntime = performance.now();\ntick();\n",
      "status": "[30]<br><span style=\"font-size:8px\">25ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}